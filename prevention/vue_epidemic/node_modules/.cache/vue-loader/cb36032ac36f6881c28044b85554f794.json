{"remainingRequest":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\1biyesheji\\code\\prevention\\vue_epidemic\\src\\components\\main\\noticeSend.vue?vue&type=template&id=f2ffb894&scoped=true&","dependencies":[{"path":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\src\\components\\main\\noticeSend.vue","mtime":1639843164271},{"path":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626773863946},{"path":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1639745719456},{"path":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626773863946},{"path":"D:\\1biyesheji\\code\\prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js","mtime":1639745719456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}